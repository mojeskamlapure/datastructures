InDataStructure
	Datastructures is a collection of values , these values can have relationship amongst them or functions applied to them.
	Each one should be meassured by what it can do and best its used for

	Example: Objects , Arrays , BlockChain 
		Blockchain is simply a data struture a way to hold information

	

Algorithams
	Algorithams are the steps or processes to manipulate these collection of values


Array:

	Arrays are sometimes called lists siple and widely used.
	Stored in a contiguouse memory i.e. in an order 
	
	lookup/push : O(1) i.e. Constant time
	
	insert/delete : O(n) i.e. Linear time

	Static Array: size has to be specified beforehand
	Dynamic Array: size need not to be specified and have the capability to relocate the array where more memory can be allocated if required
	
	In case of sorting , Arrays are awesome because elements are stored in-memory in a sequential order according to their index

	Pros: Fast Lookup , Fast push and pop

	Cons: slow inserts , slow deletes and fixed size in case of static array


Hash Tables / Maps / Dictionaries:
	Python 		: Dictionaries
	JavaScript	: Objects
	Java		: Maps
	Ruby		: Hashes
	
	Usage : Caches or Databases

	Data gets stored in a Key-Value Pair , Hash Function plays major role.
	
	Hash Function :  A function that generates a value of fixed length for each input that it gets.

			It has to be idempotent i.e. one way , no matter how many times we generate it must return the same hash value and 
			its impossible to generate input from hash value.

			It should return the exact index or address space.

	lookup/insert/delete/search : O(1)

	Its not ordered hence no need to shift or delete the elements.

	hash tables can have collisions that geneates the same address space for two different elements.
	Collision slows down the reading and writing of hashtables with O(n/k).

	JavaScript: ES6 has introduced Map and Sets
		    Diffference between map and object is that , 
		    	objects can have keys of only string types where as Maps can have any type as a key.
			Map maintains the insertion order whereas Objects doesn't

		   Sets is like a Map just the diference is it holds only keys

	Getting through all of the keys present can be linear time i.e. O(n)

	Hashtables are FastLookups , Fast Inserts , Flexible Keys but Unordered and slow key iteration
	Effective Collision Resolution has to be implemented.

	In case of nested loops with array using hash table would signifcantly improve time complexity


LinkedList:

	head and tail node i.e. (pointing to null)
	nodes gets scattered in memory unlike sequential in case of arrays
	iterating through linkedlist is slower as compared to iterationg through arrays even tough both are of O(n)
	inserting in between is lot better than array
	in comparison with hash tables , linked list has the advantages of ordered data

	preppend/append : O(1)
	lookup/insert/delete : O(n)

	Doubly linked list allows us to traverse backward hence the lookup [O(n/2)] can be technically fast as compared to singly linked list O(n) 
	though its O(n) in both cases.

	Doubly linked list has additional overhead of memory.

	
	Singly: Simple implementation , lesser memory hence less operations(insert/delete) and faster.
		can not traverse from tail i.e. no bi-directional travere
		good when there is limitation on memory
	
	Doubly: Complex implementation compared to singly , more memory(additional pointer) hence more operations and bit slower
		can traverse from both directions , possible to insert / delete from both end
		good when memory is not a issue
	
	LinkedList Pros: Fast Insertion/Deletion , Ordered and Flexible Size
	LinkedList Cons: Slow Lookup(No random access has to traverse) and More Memory


Stacks & Queues: linear high level data structures  built on top of low level data structures such as arrays and linked list
	         Only difference is the way elements get removed

		 Stacks: LIFO Last In First Out
			 Example: Function calls in any prog language , Browser History , Undo Redo Operations

			 lookup : O(n)
			 push/pop/peek: O(1)

		Queue: FIFO First In First Out
			Example : WaitList of tickets , Uber cab book , printer

			lookup: O(n)
			enqueue/dequeue/peek: O(1)

			Why Arrays should not be used in case of implementing a Queue?
			Ans : Its very inefficient as when we remove first item from beginning then rest of the items has to be shifted to left.
			      which is as good as O(n)

		Pros: Fast Operations , Fast peek and Ordered

		Cons: Slow LookUp


Trees:  A datastructures that saves/holds elements in a hierarchichal structure.
	parent child unidirectional relations

	Example: 
		DOM : Webpage is broken into Data ObjectModel
		Facebook Comments
		Abstract Syntax Tree:
		machine breaks down the code into abstract syntax tree

	LinkedList is a special type of a tree that is of linear(i.e.single path) where node has only single child.

	Binary Tree:
		Rules:
			1. each node can have atmost 0/1/2 child nodes
			2. each node can have only single parent

		Perfect Binary Tree:
			All the leaf nodes are full
			No node has single children i.e. node either have zero or two childrens
			Bottom layer of the tree completely filled
			
			This is most efficient and desirable kind of binary tree.
			Number of node son each level doubles the number of nodes as we move down the tree.	
			No. of nodes on last level = sum of nodes in all the levels +1
			half of our nodes are on last level

		Fully Binary Tree:
			No node has single children i.e. node either have zero or two childrens


		Lookup/Inser/Delete = O(log N)

		# nodes= 2^h -1 where h is height  and height starts from 1

	
	Binary Search Tree:
		Really efficient for searching
		Better than hashtable as it preserves relationships 
		Rules:
			1. nodes that are right to the parent node must be greater than parent or current node
			2. node can have upto 2 childrens
		
		Balanced vs UnBalanced BST
			
			Balanced BST would result to Lookup/Insert/Delete to O(log N)
			UnBalanced BST may result to Lookup/Insert/Deleteto O(N) as it might give us the time complexity of linkedlist
		
		Pros: Better than O(n) assuming balanced BST, Ordered , Flexible Size
		Cons: No O(1) Operations

	What's the main reason for choosing Red black trees instead of AVL trees?

 		Both red-black trees and AVL trees are the most commonly used balanced binary search trees and they support insertion, deletion and look-up in guaranteed O(logN) time. 
		However, there are following points of comparison between the two:

			AVL trees are more rigidly balanced and hence provide faster look-ups. Thus for a look-up intensive task use an AVL tree.
		
			For an insert intensive tasks, use a Red-Black tree.
		
			AVL trees store the balance factor at each node. This takes O(N) extra space. 
			However, if we know that the keys that will be inserted in the tree will always be greater than zero, 
			we can use the sign bit of the keys to store the colour information of a red-black tree. Thus, in such cases red-black tree takes no extra space.

		
	What are the application of Red black tree?

		Red-black trees are more general purpose. They do relatively well on add, remove, and look-up but AVL trees have faster look-ups at the cost of slower add/remove. 
		Red-black tree is used in the following:

		Java: java.util.TreeMap, java.util.TreeSet
		C++ STL (in most implementations): map, multimap, multiset
		Linux kernel: completely fair scheduler, linux/rbtree.h


	Binary Heap:
		Binary heap has a parent which has greater / lower values than its childrens.
		In case of parent with higher value than childs is called Max Heap.
		In case of parent with lower value than childs is called Min Heap.
		
		This is mostly used in algorithams where ordering is important.
		Example: Prioriy Queue
		
		Lookup : O(n) --> less order than BST
		insert:  O(Log N)
		delete:  O(Log N)
		
		Binary heaps are great in comparative operations.
		
		Widely Used:
			Data Storage , Sorting Algo and Priority Queue
			
		
		NOTE: Memory Heap has nothing to do with Heap DS , its just co-incidental.
		
		There is not concept of balance or unbalance as that of BST. Its just the insertion between left and right.
		
		
	Binary Heap Vs BST
	
	



	Trie:
		A specialized tree used in a searching the text . 
		Root can have a max 26 childrens
		Example:
			existance of word
			auto suggestions on search engine
			dictionary search
			IP routing
			
		Pros: Speed and Space
		
		O(len) --> length of the word
		
Graphs:
	most useful and important DS in computer science for modeling real life problems.
	Each item called as node or vertex connected with edges.
	
	Example:
		Faebook: uses it for social network and 
		Amazon:  uses it for recommendation engines.
		Google Maps: shortest path
	
	Types of Graphs:
		Directed Graphs:  Unidirectional
			Example: Friends(Followers) on Twitter
		
		Undirected Graphs: Bidirectional 
			Example: Friends on Facebook
	
		Weighted Graph:
			Google Maps for shortest path
	
		Unweighted Graph:
	
		Cyclic:
			Google Maps 
		
		Acyclic:
		
	Ways To Implement Graphs:
		Edge List : [ [0,2], [2,3], [2,1], [1,3] ]
		
		Adjacent List : 
				[ [2], [2,3], [0,1,3], [1,2] ]
			where array index is node and values are the nodes its connected to
		
		Adjacent matrix : 
	
			[
			[0,0,1,0],
			[0,0,1,1],
			[0,1,0,1],
			[0,1,1,0]
			]
	
	
	

			










		 	
       



	



















